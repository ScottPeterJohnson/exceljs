{"version":3,"sources":["../../../../../lib/xlsx/xform/simple/integer-xform.js"],"names":["utils","require","BaseXform","IntegerXform","module","exports","options","tag","ns","attr","attrs","zero","inherits","render","xmlStream","model","openNode","formatTag","addAttributes","addAttribute","writeText","closeNode","parseOpen","node","name","parseInt","attributes","text","parseText","push","parseClose","join"],"mappings":"AAAA;;;;;;AAMA;;AAEA,IAAIA,QAAQC,QAAQ,sBAAR,CAAZ;AACA,IAAIC,YAAYD,QAAQ,eAAR,CAAhB;;AAEA,IAAIE,eAAeC,OAAOC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACpD,OAAKC,GAAL,GAAWD,QAAQC,GAAnB;AACA,OAAKC,EAAL,GAAUF,QAAQE,EAAlB;AACA,OAAKC,IAAL,GAAYH,QAAQG,IAApB;AACA,OAAKC,KAAL,GAAaJ,QAAQI,KAArB;;AAEA;AACA,OAAKC,IAAL,GAAYL,QAAQK,IAApB;AACD,CARD;;AAUAX,MAAMY,QAAN,CAAeT,YAAf,EAA6BD,SAA7B,EAAwC;;AAEtCW,UAAQ,gBAASC,SAAT,EAAoBC,KAApB,EAA2B;AACjC;AACA,QAAIA,SAAS,KAAKJ,IAAlB,EAAwB;AACtBG,gBAAUE,QAAV,CAAmB,KAAKC,SAAL,EAAnB;AACA,UAAI,KAAKP,KAAT,EAAgB;AACdI,kBAAUI,aAAV,CAAwB,KAAKR,KAA7B;AACD;AACD,UAAI,KAAKD,IAAT,EAAe;AACbK,kBAAUK,YAAV,CAAuB,KAAKV,IAA5B,EAAkCM,KAAlC;AACD,OAFD,MAEO;AACLD,kBAAUM,SAAV,CAAoBL,KAApB;AACD;AACDD,gBAAUO,SAAV;AACD;AACF,GAhBqC;;AAkBtCC,aAAW,mBAASC,IAAT,EAAe;AACxB,QAAIA,KAAKC,IAAL,KAAc,KAAKjB,GAAvB,EAA4B;AAC1B,UAAI,KAAKE,IAAT,EAAe;AACb,aAAKM,KAAL,GAAaU,SAASF,KAAKG,UAAL,CAAgB,KAAKjB,IAArB,CAAT,EAAqC,EAArC,CAAb;AACD,OAFD,MAEO;AACL,aAAKkB,IAAL,GAAY,EAAZ;AACD;AACD,aAAO,IAAP;AACD;AACD,WAAO,KAAP;AACD,GA5BqC;AA6BtCC,aAAW,mBAASD,IAAT,EAAe;AACxB,QAAI,CAAC,KAAKlB,IAAV,EAAgB;AACd,WAAKkB,IAAL,CAAUE,IAAV,CAAeF,IAAf;AACD;AACF,GAjCqC;AAkCtCG,cAAY,sBAAW;AACrB,QAAI,CAAC,KAAKrB,IAAV,EAAgB;AACd,WAAKM,KAAL,GAAaU,SAAS,KAAKE,IAAL,CAAUI,IAAV,CAAe,EAAf,KAAsB,CAA/B,EAAkC,EAAlC,CAAb;AACD;AACD,WAAO,KAAP;AACD;AAvCqC,CAAxC","file":"integer-xform.js","sourcesContent":["/**\n * Copyright (c) 2015 Guyon Roche\n * LICENCE: MIT - please refer to LICENCE file included with this module\n * or https://github.com/guyonroche/exceljs/blob/master/LICENSE\n */\n\n'use strict';\n\nvar utils = require('../../../utils/utils');\nvar BaseXform = require('../base-xform');\n\nvar IntegerXform = module.exports = function(options) {\n  this.tag = options.tag;\n  this.ns = options.ns;\n  this.attr = options.attr;\n  this.attrs = options.attrs;\n\n  // option to render zero\n  this.zero = options.zero;\n};\n\nutils.inherits(IntegerXform, BaseXform, {\n  \n  render: function(xmlStream, model) {\n    // int is different to float in that zero is not rendered\n    if (model || this.zero) {\n      xmlStream.openNode(this.formatTag());\n      if (this.attrs) {\n        xmlStream.addAttributes(this.attrs);\n      }\n      if (this.attr) {\n        xmlStream.addAttribute(this.attr, model);\n      } else {\n        xmlStream.writeText(model);\n      }\n      xmlStream.closeNode();\n    }\n  },\n\n  parseOpen: function(node) {\n    if (node.name === this.tag) {\n      if (this.attr) {\n        this.model = parseInt(node.attributes[this.attr], 10);\n      } else {\n        this.text = [];\n      }\n      return true;\n    }\n    return false;\n  },\n  parseText: function(text) {\n    if (!this.attr) {\n      this.text.push(text);\n    }\n  },\n  parseClose: function() {\n    if (!this.attr) {\n      this.model = parseInt(this.text.join('') || 0, 10);\n    }\n    return false;\n  }\n});\n"]}